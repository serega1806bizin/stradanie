import express from 'express';
import fs from 'fs';
import cors from 'cors';
import path from 'path';
import multer from 'multer';

const app = express();
const PORT = process.env.PORT || 8080;

const filePathTests = path.resolve('tests.json'); // –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
const filePathAnswers = path.resolve('answers.json'); // –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å

app.use(cors());
app.use(express.json());

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º __dirname –¥–ª—è ES-–º–æ–¥—É–ª–µ–π
const __dirname = path.dirname(new URL(import.meta.url).pathname);
// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
const uploadDir = path.join(__dirname, 'uploads');
if (!fs.existsSync(uploadDir)) {
  fs.mkdirSync(uploadDir, { recursive: true });
}

// –û—Ç–¥–∞—ë–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ uploads
app.use('/uploads', express.static(uploadDir));

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º multer —Å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, uploadDir);
  },
 filename: (req, file, cb) => {
  const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1e9);
  cb(null, uniqueSuffix + '-' + file.originalname);
},

});

const upload = multer({ storage });

// –ù–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
// –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ –≤ multipart/form-data –ø–µ—Ä–µ–¥–∞–Ω—ã: 
// - –ø–æ–ª–µ questionId (–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–æ–ø—Ä–æ—Å–∞)
// - —Ñ–∞–π–ª—ã –≤ –ø–æ–ª–µ "images" (–¥–æ 8 —Ñ–∞–π–ª–æ–≤)
app.post('/upload', upload.array('images', 8), (req, res) => {
  const files = req.files;
  if (!files || files.length === 0) {
    return res.status(400).send('–§–∞–π–ª—ã –Ω–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.');
  }
  // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  const fileUrls = files.map(file => `${req.protocol}://${req.get('host')}/uploads/${file.filename}`);
  res.status(200).json({ urls: fileUrls });
});


const calculateScore = (test, studentAnswers) => {
  let totalScore = 0;

  console.log(`üìå –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–ª—ã –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞: ${studentAnswers.student}`);
  console.log("üîç –û—Ç–≤–µ—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–∞:", studentAnswers.answers);

  test.questions.forEach(question => {
    const studentAnswer = studentAnswers.answers.find(ans => Number(ans["question-id"]) === Number(question.id));

    if (!studentAnswer) {
      console.log(`üö´ –í–æ–ø—Ä–æ—Å ${question.id} (${question.text}) - ‚ùå –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç!`);
      return;
    }

    let earnedPoints = 0;
    const maxPoints = question.points;

    console.log(`\nüîé –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ø—Ä–æ—Å: ${question.text} (–¢–∏–ø: ${question.type})`);
    console.log(`‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:`, question.answer);
    console.log(`üìù –û—Ç–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞:`, studentAnswer.answer);

    switch (question.type) {
      case "text":
        if (studentAnswer.answer.trim().toLowerCase() === question.answer.trim().toLowerCase()) {
          earnedPoints = maxPoints;
        }
        break;

      case "number":
        if (Number(studentAnswer.answer) === Number(question.answer)) {
          earnedPoints = maxPoints;
        }
        break;

      case "list-num":
        if (question.answer.consistencyImportant) {
          let correctCount = 0;
          question.answer.massiv.forEach((num, i) => {
            if (studentAnswer.answer[i] === num) correctCount++;
          });
          earnedPoints = (correctCount / question.answer.massiv.length) * maxPoints;
        } else {
          const correctSet = new Set(question.answer.massiv);
          const studentSet = new Set(studentAnswer.answer);
          const correctCount = [...studentSet].filter(num => correctSet.has(num)).length;
          earnedPoints = (correctCount / question.answer.massiv.length) * maxPoints;
        }
        break;

      case "matrix":
        const correctMatrix = JSON.stringify(question.answer);
        const studentMatrix = JSON.stringify(studentAnswer.answer.answer);
        if (correctMatrix === studentMatrix) {
          earnedPoints = maxPoints;
        } else {
          let correctCount = 0;
          const totalElements = question.answer.flat().length;
          question.answer.forEach((row, i) => {
            row.forEach((num, j) => {
              if (studentAnswer.answer.answer[i] && studentAnswer.answer.answer[i][j] === num) {
                correctCount++;
              }
            });
          });
          earnedPoints = (correctCount / totalElements) * maxPoints;
        }
        break;

      case "variants":
        if (JSON.stringify(studentAnswer.answer) === JSON.stringify(question.answer.correct)) {
          earnedPoints = maxPoints;
        }
        break;

      default:
        console.warn(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞: ${question.type}`);
    }

    totalScore += Math.round(earnedPoints);
  });

  console.log(`‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª —Å—Ç—É–¥–µ–Ω—Ç–∞ ${studentAnswers.student}: ${totalScore}`);
  return totalScore;
};


// –§—É–Ω–∫—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è JSON
const readData = (filePath) => {
    try {
        if (!fs.existsSync(filePath)) return [];
        const content = fs.readFileSync(filePath, 'utf8');
        return JSON.parse(content) || [];
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
        return [];
    }
};

// ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
app.post('/submit', (req, res) => {
  const answerData = req.body;
  
  const tests = readData(filePathTests);
  const test = tests.find(t => t.id === answerData["id-test"]);

  if (!test) {
    return res.status(404).json({ error: "–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
  }

  // ‚úÖ –†–∞—Å—á–µ—Ç –±–∞–ª–ª–æ–≤ –Ω–∞ –±—ç–∫–µ
  answerData.mark = calculateScore(test, answerData);

  const answers = readData(filePathAnswers);
  answers.push(answerData);
  writeData(answers, filePathAnswers);

  // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ç–µ—Å—Ç–µ
  const testIndex = tests.findIndex(t => t.id === answerData["id-test"]);
  tests[testIndex].progress = (tests[testIndex].progress || 0) + 1;
  writeData(tests, filePathTests);

  res.status(200).json({
    message: "–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª—ë–Ω, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –æ—Ü–µ–Ω–∫–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞!",
    updatedTest: tests[testIndex],
    mark: answerData.mark,
  });
});





// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤
app.get('/api/answers', (req, res) => {
  const answers = readData(filePathAnswers);
  res.json(answers);
});

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ ID —Ç–µ—Å—Ç–∞
app.get('/api/answers/:idTest', (req, res) => {
    const idTest = Number(req.params.idTest); // –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —á–∏—Å–ª—É
    const answers = readData(filePathAnswers);

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –æ—Ç–≤–µ—Ç—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–≤–ø–∞–¥–∞–µ—Ç id-test
    const filteredAnswers = answers.filter(answer => answer["id-test"] === idTest);

    if (filteredAnswers.length === 0) {
        return res.status(404).json({ error: '–û—Ç–≤–µ—Ç—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' });
    }

    res.json(filteredAnswers);
});



// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø–æ ID (—É–ª—É—á—à–µ–Ω–æ)
app.get('/api/tests/:id', (req, res) => {
  const testId = Number(req.params.id); // –ß–∏—Å–ª–æ–≤–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ

  const tests = readData(filePathTests);
  const test = tests.find((t) => t.id === testId);

  if (!test) {
      return res.status(404).json({ error: '–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }

  res.json(test);
});

// –§—É–Ω–∫—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∑–∞–ø–∏—Å–∏ JSON
const writeData = (data, filePath) => {
    try {
        fs.writeFileSync(filePath, JSON.stringify(data, null, 2));
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞:', error);
    }
};

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
app.get('/api/tests', (req, res) => {
    const data = readData(filePathTests);
    res.json(data);
});


// ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞
app.post('/api/tests', (req, res) => {
    const data = readData(filePathTests);
    const newTest = { id: Date.now(), ...req.body };

    data.push(newTest);
    writeData(data, filePathTests);

    res.status(201).json(newTest);
});

// ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –ø–æ id –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
app.delete('/api/tests/:id', (req, res) => {
    const { id } = req.params;
    const testId = Number(id);

    // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç–µ—Å—Ç—ã
    let tests = readData(filePathTests);
    const newTests = tests.filter(test => test.id !== testId);

    if (tests.length === newTests.length) {
        return res.status(404).json({ error: '–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã
    writeData(newTests, filePathTests);

    // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã
    let answers = readData(filePathAnswers);
    const newAnswers = answers.filter(answer => answer["id-test"] !== testId);

    // –ï—Å–ª–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –æ—Ç–≤–µ—Ç—ã, –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª
    if (answers.length !== newAnswers.length) {
        writeData(newAnswers, filePathAnswers);
    }

    res.json({ message: '–¢–µ—Å—Ç –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —É–¥–∞–ª–µ–Ω—ã' });
});


// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});
